<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+Github+Next搭建个人博客</title>
    <url>/archives/a6f5b56e.html</url>
    <content><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<a id="more"></a></p>
</blockquote>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><a href="#前言" title="前言"></a>前言</h1><p>你了解<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener external nofollow noreferrer">Hexo</a>吗？ Hexo是一个静态博客框架，基于Node.js，将Markdown文章通过渲染引擎，生成一个静态网页，再结合Git命令（ssh），Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener external nofollow noreferrer">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<p>几个月前偶然间了解到了Hexo这个静态博客网站，很适合那些喜欢写作的朋友们，最重要的是它是免费的，里面有许多的博客主题模板，这些主题都是一些很牛的大佬们开发的，而且设计的主题都很棒，让我很心动，心动不如行动，于是开始整理搭建属于自己的博客。直到今天，这中间经历了许多的坎坷荆棘，我将我的博客搭建的流程分享出来，能为那些博客小石榴们提供一些帮助吧，如果有错的话，请给我留言，我会及时修改，废话不多说，直接上教程。</p>
<blockquote>
<p><strong>如果下面的教程有错误之处，请在评论区留言，收到后，我会尽快修改，谢谢支持！</strong></p>
</blockquote>
<h1 id="一、博客环境搭建"><a href="#一、博客环境搭建" class="headerlink" title="一、博客环境搭建"></a><a href="#一、博客环境搭建" title="一、博客环境搭建"></a>一、博客环境搭建</h1><blockquote>
<p>本文系统环境信息：Win10专业版，64位（10.0 版本18362）</p>
<p>Node.js：12.13.0 Git：2.24.0</p>
<p>修改配置文件要用到的软件（可选）：</p>
<ol>
<li><a href="https://code.visualstudio.com/" target="_blank" rel="noopener external nofollow noreferrer">Visual Studio Code</a>（适合有开发基础的程序员，非常好用）</li>
<li>Sublime Text3，可免费使用，<a href="https://pan.baidu.com/s/1uKA-aBHm_CsmJI5GolrV1Q" target="_blank" rel="noopener external nofollow noreferrer">百度网盘</a>（提取码：mh0y）</li>
<li><a href="https://notepad-plus-plus.org/downloads/" target="_blank" rel="noopener external nofollow noreferrer">NodePad++</a> 7.8.1（最新的，也可以在官网选择其他版本）</li>
</ol>
</blockquote>
<h2 id="1-下载Git和Node-js"><a href="#1-下载Git和Node-js" class="headerlink" title="1. 下载Git和Node.js"></a><a href="#1-下载Git和Node-js" title="1. 下载Git和Node.js"></a>1. 下载Git和Node.js</h2><h3 id="1-1-Node-js的安装与配置"><a href="#1-1-Node-js的安装与配置" class="headerlink" title="1.1 Node.js的安装与配置"></a><a href="#1-1-Node-js的安装与配置" title="1.1 Node.js的安装与配置"></a>1.1 Node.js的安装与配置</h3><p>首先去<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener external nofollow noreferrer">Node.js官网</a> 下载node.js的安装程序，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/nodejs-0.png" alt="Node.js下载以及版本的选择"></p>
<p>下载好与电脑系统对应的安装程序后，开始安装流程：</p>
<ol>
<li>打开下载好的Node.js安装程序，点击Next，进行下一步的安装；</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-1.png" alt="img"></p>
<ol>
<li>将”I accept the terms in the License Agreement”前面的复选框勾选，同意安装协议，再点击Next，进行下一步操作；</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-2.png" alt="img"></p>
<ol>
<li>选择Node.js安装程序的安装位置，在这里我以”C:\Program Files\nodejs”为例，点击Next，进入下一步操作；</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-3.png" alt="img"></p>
<ol>
<li>选择安装的模块和功能，这里全部安装，并添加到系统环境变量 ，继续点击Next，进入下一步操作；</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-4.png" alt="img"></p>
<ol>
<li>这一步可以跳过，这个选项的意思是安装一些编译本地模块的工具，比如python，C/C++等，点击Next，进入下一步；</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-5.png" alt="img"></p>
<ol>
<li>点击”Install”，等待Node.js安装完成；</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-6.png" alt="img"></p>
<ol>
<li>当看到下图所显示的情况，Node.js就成功安装完毕。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-7.png" alt="img"></p>
<ol>
<li>验证安装，并测试Node.js是否加入环境变量，当出现如下图的情况，Node.js安装大功告成。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-8.png" alt="img"></p>
<p>如果执行<code>node -v</code>报错的话，那么手动将Node.js的安装路径添加到环境变量中，右击点击我的电脑 -&gt;属性 -&gt; 高级系统设置 -&gt; 环境变量，在系统变量下找到名为path的变量名，如下图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117191107.png" alt="img"></p>
<p>选中path，或者双击，然后将你node.js的安装路径放在path变量值的最后面，如果添加之前path值最后有 英文的分号，则直接将路径添加进去即可，如果没有，先添加分号，然后点击保存，回到桌面，打开cmd（Win+R），执行<code>node -v</code>，看是否成功。</p>
<ol>
<li><p>设置npm的镜像源：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看npm的配置</span><br><span class="line">npm config list</span><br><span class="line"># 默认源</span><br><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npmjs.org</span><br><span class="line"># 临时改变镜像源</span><br><span class="line">npm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line"># 永久设置为淘宝镜像源</span><br><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line"># 另一种方式，编辑 ~&#x2F;.npmrc 加入下面内容</span><br><span class="line">registry &#x3D; https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>
</li>
<li><p>设置npm的内置路径——&gt;全局模块路径和缓存路径（_可选_）</p>
</li>
</ol>
<p>如果不改变内置路径也可，除非你的C盘空间足够bigger，这一步可以略过，不改变的话，它的路径在：</p>
<blockquote>
<p>此处参考：<a href="https://blog.csdn.net/jianleking/article/details/79130667" target="_blank" rel="noopener external nofollow noreferrer">jyjin的node环境变量配置，npm环境变量配置</a></p>
</blockquote>
<ul>
<li><p>npm包全局目录：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:&#x2F;Users&#x2F;[username]&#x2F;AppData&#x2F;Roaming&#x2F;npm&#x2F;node_modules</span><br></pre></td></tr></table></figure></p>
</li>
<li><p>npm包全局命令目录：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:&#x2F;Users&#x2F;[username]&#x2F;AppData&#x2F;Roaming&#x2F;npm</span><br></pre></td></tr></table></figure></p>
</li>
<li><p>npm实际去找全局命令的目录：<code>C:/Users/[username]/.npmrc</code> 文件内容的<code>prefix</code>值</p>
</li>
<li><p>npm包全局cache目录：<code>C:/Users/[username]/.npmrc</code> 文件内容的<code>cache</code>值</p>
</li>
</ul>
<p>首先在你Node.js的安装位置，新建两个文件夹，<code>node_global</code>和<code>node_cache</code>，我的路径是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">C:\Program Files\nodejs\node_global</span>
<span class="line">C:\Program Files\nodejs\node_cache</span>
</pre></td></tr></table></figure>

<p>然后分别执行的命令就是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">npm config set prefix&quot;C:\Program Files\nodejs\node_global&quot;</span>
<span class="line">npm config set cache &quot;C:\Program Files\nodejs\node_cache&quot;</span>
</pre></td></tr></table></figure>

<p>然后在配置环境变量，右击我的电脑 -&gt;属性 -&gt; 高级系统设置 -&gt; 环境变量同样的位置，在用户变量的地方，找到path变量进行修改，修改值如下图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-11.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-12.png" alt="img"></p>
<p>然后就大功告成了，Node.js就安装完毕了，下面开始Git安装。👇👇👇</p>
<h3 id="1-2-Git的安装与配置"><a href="#1-2-Git的安装与配置" class="headerlink" title="1.2 Git的安装与配置"></a><a href="#1-2-Git的安装与配置" title="1.2 Git的安装与配置"></a>1.2 Git的安装与配置</h3><p>首先就是去<a href="https://git-scm.com/" target="_blank" rel="noopener external nofollow noreferrer">Git官网</a>下载Git，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117193737.png" alt="img"></p>
<ol>
<li>下载好Git的安装包，开始安装，打开安装包，出现如图的界面，点击Next：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-1.png" alt="img"></p>
<ol>
<li>选择你要安装的位置，我以C盘为例，路径为图中所示，安装到其他位置的话，点击Browse，选择你要安装的位置，然后点击Next，进入下一步：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-2.png" alt="img"></p>
<ol>
<li>选择你是否创建桌面快捷放方式，其他默认即可，点击Next，进入下一步：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-3.png" alt="img"></p>
<ol>
<li>是否将Git快捷方式的目录加入开是菜单栏</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-4.png" alt="img"></p>
<ol>
<li>这个是选择文本编辑器的方式，默认是Vim，也可以选择其他的方式，自主选择，在这里我选择的Vim默认方式。选择好文本编辑器的方式后，点击Next，进入下一个流程：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-5.png" alt="img"></p>
<ol>
<li>选择安装 Git 时对环境变量PATH的影响，第一种影响较小，第三种会影响到Windows的自带工具，默认勾选中间项，建议不要修改，直接点击 “Next” 继续安装：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-6.png" alt="img"></p>
<ol>
<li>选择 Git 在使用 HTTPS 时使用的库，若无特殊需求，可保持默认选项，点击 “Next” 继续安装：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-7.png" alt="img"></p>
<ol>
<li>选择提交与拉取记录时，对换行符的处理方式，若无特殊需要，默认选择即可，点击 “Next” 继续安装：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-8.png" alt="img"></p>
<ol>
<li>选择模拟终端软件（即命令行窗口软件），若无特殊需要，可默认选择，点击 “Next” 继续安装：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-9.png" alt="img"></p>
<ol>
<li>最新功能的询问，若不想尝试尚未保证稳定性的新功能，默认不勾选，点击 “Install” 即可完成安装：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-10.png" alt="img"></p>
<ol>
<li>安装完成</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-11.png" alt="img"></p>
<ol>
<li>回到桌面，点击鼠标右键，会出现两个选项<code>Git GUI Here</code>和<code>Git Bash Here</code>，在打开Cmd(Win+R)，分别输入<code>git</code>和<code>git --version</code>，如果出现如下图的情况，即安装成功！</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-12.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-13.png" alt="img"></p>
<h1 id="二、Github注册以及Github-Pages创建"><a href="#二、Github注册以及Github-Pages创建" class="headerlink" title="二、Github注册以及Github Pages创建"></a><a href="#二、Github注册以及Github-Pages创建" title="二、Github注册以及Github Pages创建"></a>二、Github注册以及Github Pages创建</h1><ol>
<li>打开Github<a href="https://github.com/" target="_blank" rel="noopener external nofollow noreferrer">官网首页</a>，点击右上角的<strong>Sign Up</strong> ，然后在出现的页面上填写你的相关信息，进行注册：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117203432.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117204639.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117204955.png" alt="img"></p>
<p>验证完成后，点击Next：Select a plan，会出现如上图的验证界面，同理，只需要将其中的动物调整为正向显示即可。接着会出现下图的界面，选择Free，下方的两个选项可选可不选，点击<strong>Continue</strong>继续：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117211431.png" alt="img"></p>
<p>这时Github会给你发一封邮件，验证一下即可，验证过后才可以创建库。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117212721.png" alt="img"></p>
<p>验证完成后，开始创建库，如下图所示，仓库名创建格式必须为：<code>&amp;lt;用户名&amp;gt;.github.io</code>，<code>Description</code>为描述仓库，自定义写，填写必要的描述，也可不填。勾选<code>Initialize this repository with a README</code>点击<code>Creat repository</code>进行创建。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117212538.png" alt="img"></p>
<p>然后就会出现如图所示的界面，即仓库创建成功！</p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117213321.png" alt="img"></p>
<p>我们来测试一下，点击<code>Create new file</code>，出现如下界面，然后命名文件名为<code>index.html</code>，在填写如图的内容，再点击<code>Commit new file</code>，即创建成功，然后打开一个新的网页，输入网址<code>https://&amp;lt;你的用户名&amp;gt;.github.io</code>，即可以看见一个新的网页，其中的内容就是你写的内容。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117214029.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117213957.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117214450.png" alt="img"></p>
<p>至此，Github的注册以及Github Pages已经创建完成了。</p>
<h1 id="三、配置Git用户名和邮箱"><a href="#三、配置Git用户名和邮箱" class="headerlink" title="三、配置Git用户名和邮箱"></a><a href="#三、配置Git用户名和邮箱" title="三、配置Git用户名和邮箱"></a>三、配置Git用户名和邮箱</h1><p>在桌面点击鼠标右键，点击<code>Git Bash Here</code>，会出现一个界面如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117215118.png" alt="img"></p>
<p>然后分别输入下面的两个命令，并回车：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;此处填写你注册时的用户名&quot;</span>
<span class="line">git config --global user.email &quot;此处填写你注册时的邮箱&quot;</span>
<span class="line"># 一般只要不报错，可以跳过下面寻找.gitconfig文件</span>
</pre></td></tr></table></figure>

<p>然后找到<code>.gitconfig</code>文件，文件存放位置在<code>C:/Users/[username]/.gitconfig</code>（未找到的话，请开启显示隐藏文件的功能），用编辑器打开，看到如下图所示的内容，即配置成功！</p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117220016.png" alt="img"></p>
<h1 id="四、本地安装hexo静态博客框架以及发布到Github-Pages"><a href="#四、本地安装hexo静态博客框架以及发布到Github-Pages" class="headerlink" title="四、本地安装hexo静态博客框架以及发布到Github Pages"></a><a href="#四、本地安装hexo静态博客框架以及发布到Github-Pages" title="四、本地安装hexo静态博客框架以及发布到Github Pages"></a>四、本地安装hexo静态博客框架以及发布到Github Pages</h1><ol>
<li>首先选择一个磁盘作为你博客文件的存放位置，然后新建一个文件夹，比如名为blogtest的文件夹，创建完后，先不要点进去，在此处点击鼠标右键，选择<code>Git Bash Here</code>，然后依次输入如下命令，：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># hexo框架的安装</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"># 等上一个命令完成后，在输入下面的命令</span><br><span class="line">hexo init &lt;新建文件夹的名称&gt;  #初始化文件夹</span><br><span class="line">cd &lt;新建文件夹的名称&gt;</span><br><span class="line">npm install  # 安装博客所需要的依赖文件</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117221129.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117221144.png" alt="img"></p>
<p>等待运行完成，此时文件夹中多了许多文件。 <strong>注意</strong>：<strong>后续的命令均需要在站点目录下（即文件夹内）使用Git Bash运行。</strong> 此时Hexo框架的本地搭建已经完成了。我们来运行一下看看，命令行依次输入以下命令 :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">hexo g</span>
<span class="line">hexo s</span>
</pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117221157.png" alt="img"></p>
<p>浏览器中打开<a href="http://locakhost:4000或者127.0.0.1:4000，可以看到一个网页，说明Hexo博客已经成功在本地运行。" rel="external nofollow noreferrer">http://locakhost:4000或者127.0.0.1:4000，可以看到一个网页，说明Hexo博客已经成功在本地运行。</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117221206.png" alt="img"></p>
<h2 id="1-本地博客发布到Github-Pages"><a href="#1-本地博客发布到Github-Pages" class="headerlink" title="1. 本地博客发布到Github Pages"></a><a href="#1-本地博客发布到Github-Pages" title="1. 本地博客发布到Github Pages"></a>1. 本地博客发布到Github Pages</h2><p>之前的步骤中，我们已经完成了对Github账户的注册以及Github Pages的创建，接下来是将本地博客发布至Github Pages。</p>
<ol>
<li><p>首先需要安装发布的插件，在站点目录下执行下面的命令，也就是创建的博客目录下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
</li>
<li><p>紧接着，将本地目录与GitHub关联起来，输入下面的命令行：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</span><br></pre></td></tr></table></figure></p>
</li>
</ol>
<p>输入后一直回车，然后在<code>C:/Users/[username]</code>目录下找到名为<code>.ssh</code>的文件夹， 文件夹内会有两个文件，一个<code>id_rsa.pub</code>一个<code>id_rsa</code>，用文本编辑器打开<code>id_rsa.pub</code>，复制里面的的内容。 然后打开Github，点击右上角的头像 <strong>Settings</strong> 选择<strong>SSH and GPG keys</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117222746.png" alt="img"></p>
<p>点击<strong>New SSH key</strong> 将之前复制的内容粘帖到Key的框中。 上面的<strong>Title</strong>可以随意，点击<strong>Add SSH key</strong> 完成添加。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117223049.png" alt="img"></p>
<p>然后回到Git的命令行界面，测试一下是否与GitHub连接成功。输入下面的命令行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span>
</pre></td></tr></table></figure>

<p>点击回车，然后会出现一个询问内容，输入<code>yes</code>，回车，会出现一段内容，<code>Hi ! You&amp;#39;ve successfully authenticated, but GitHub doesnot provide shell access.</code>。 说明连接成功。此处这个``应该是你Github的用户名。</p>
<ol>
<li>进入博客站点目录，用文本编辑器打开<code>_config.yml</code>，这个<code>_config.yml</code>是博客的配置文件，在以后的博客修改，如个性化修改，博客SEO优化等都会使用到，修改如下图的几个地方：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 你的博客名</span><br><span class="line">subtitle: 博客的副标题，有些主题支持</span><br><span class="line">description: 博客描述</span><br><span class="line">keywords: 博客关键词</span><br><span class="line">author: 作者，在文章中显示</span><br><span class="line">language: 博客语言语种   </span><br><span class="line">timezone: 时区</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117224138.png" alt="img"></p>
<p>滑到文件最底部，有一个deploy，在deploy下面添加一个repo项 ，一个branch项。填入如下代码，并如下图所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">type: git</span>
<span class="line">repo: git@github.com:Github用户名&#x2F;github用户名.github.io.git  </span>
<span class="line">&#x2F;&#x2F;也可使用https地址，如：https:&#x2F;&#x2F;github.com&#x2F;Github用户名&#x2F;Github用户名.github.io.git            </span>
<span class="line">branch: master</span>
</pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117224151.png" alt="img"></p>
<ol>
<li>最后就是生成页面，并发布至Github Pages，执行如下命令：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Hexo会根据配置文件渲染出一套静态页面</span><br><span class="line">hexo g</span><br><span class="line"># 将上一步渲染出的一系列文件上传至至Github Pages</span><br><span class="line">hexo d</span><br><span class="line"># 也可以直接输入此命令，直接完成渲染和上传</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></li>
</ol>
<p>上传完成后，在浏览器中打开<strong>https://&lt;用户名&gt;.github.io</strong>，查看上传的网页。如果页面变成了之前本地调试时的样子，说明上传以及完成了。没变的话查看一下上传时命令行窗口的信息有没有错误信息，没有的话清除一下浏览器缓存试试。</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/archives/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener external nofollow noreferrer">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener external nofollow noreferrer">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener external nofollow noreferrer">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener external nofollow noreferrer">GitHub</a>.  <a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener external nofollow noreferrer">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener external nofollow noreferrer">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener external nofollow noreferrer">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener external nofollow noreferrer">Deployment</a></p>
]]></content>
  </entry>
</search>
